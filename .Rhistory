london_2012 <- london_2012 %>%
rename(c(Name = Name, Sex = Sex, Age = Age, Height = Height, Weight = Weight, Team = Team, Sport = Sport, Event = Event, Medal = Medal))
rio_2016 <- rio_2016 %>%
rename(c(Name = Name, Sex = Sex, Age = Age_year, Height = Height_cm, Weight = Weight_lbs, Team = Country, Sport = Sport, Event = Event, Medal = Medal))
# Convertando lbs para kg
sydney_2000$Weight <- sydney_2000$Weight * 0.453592
athina_2004$Weight <- athina_2004$Weight * 0.453592
beijing_2008$Weight <- beijing_2008$Weight * 0.453592
london_2012$Weight <- london_2012$Weight * 0.453592
rio_2016$Weight <- rio_2016$Weight * 0.453592
sydney_2000$Height <- sydney_2000$Height / 100
athina_2004$Height <- athina_2004$Height / 100
beijing_2008$Height <- beijing_2008$Height / 100
london_2012$Height <- london_2012$Height / 100
rio_2016$Height <- rio_2016$Height / 100
# Sexo
sydney_2000 %>% distinct(Sex)# elementos da coluna sem duplicatas
sydney_2000$Sex <- as.factor(sydney_2000$Sex)
athina_2004 %>% distinct(Sex)# elementos da coluna sem duplicatas
athina_2004$Sex <- as.factor(athina_2004$Sex)
beijing_2008 %>% distinct(Sex)# elementos da coluna sem duplicatas
beijing_2008$Sex <- as.factor(beijing_2008$Sex)
london_2012 %>% distinct(Sex)# elementos da coluna sem duplicatas
london_2012$Sex <- as.factor(london_2012$Sex)
rio_2016 %>% distinct(Sex)# elementos da coluna sem duplicatas
rio_2016$Sex <- as.factor(rio_2016$Sex)
# Sedes das olimpiadas
sydney_2000 <- sydney_2000 %>% mutate(Olimpiada = "Sydney")
athina_2004 <- athina_2004 %>% mutate(Olimpiada = "Athina")
beijing_2008 <- beijing_2008 %>% mutate(Olimpiada = "Beijing")
london_2012 <- london_2012 %>% mutate(Olimpiada = "London")
rio_2016 <- rio_2016 %>% mutate(Olimpiada = "Rio")
olimpiadas <- rbind(sydney_2000,athina_2004,beijing_2008,london_2012,rio_2016)
# Tema da Estat
cores_estat <- c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600", "#CC9966", "#999966", "#006606", "#008091", "#041835", "#666666")
theme_estat <- function(...) {
theme <- ggplot2::theme_bw() +
ggplot2::theme(
axis.title.y = ggplot2::element_text(colour = "black", size = 12),
axis.title.x = ggplot2::element_text(colour = "black", size = 12),
axis.text = ggplot2::element_text(colour = "black", size = 9.5),
panel.border = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black"),
legend.position = "top",
...
)
return(
list(
theme,
scale_fill_manual(values = cores_estat),
scale_colour_manual(values = cores_estat)
)
)
}
# Total (Tabela pronta, mas falta colocar a padronização da Estat)
top_5_total<-olimpiadas %>%
filter(Sex == "F", !is.na(Medal)) %>%  # Filtrar por mulheres e remover registros sem medalhas
group_by(Team) %>%  # Agrupar por país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(desc(total_medalhistas)) %>%  # Ordenar por número de medalhistas de forma decrescente
slice_head(n = 5)
ggplot(top_5_total, aes(x = reorder(Team, -total_medalhistas), y = total_medalhistas)) +
geom_bar(stat = "identity", fill = c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600")) +
labs(x = "País", y = "Número de Mulheres Medalhistas",
title = "Top 5 Países com Maior Número de Mulheres Medalhistas") +
theme_estat()
ggplot(top_5_total, aes(x = reorder(Team, -total_medalhistas), y = total_medalhistas, label = Team)) +
geom_bar(stat = "identity", fill = c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600")) +
labs(x = "País", y = "Número de Mulheres Medalhistas",
title = "Top 5 Países com Maior Número de Mulheres Medalhistas") +
theme_estat()
top_5 <- olimpiadas %>%
filter(Sex == "F", !is.na(Medal)) %>%  # Filtrar por mulheres e remover registros sem medalhas
group_by(Olimpiada, Team) %>%  # Agrupar por Olimpíada e país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(Olimpiada, desc(total_medalhistas)) %>%  # Ordenar por Olimpíada e número de medalhistas
group_by(Olimpiada) %>%  # Agrupar novamente por Olimpíada
slice_head(n = 5) %>% # Selecionar os 5 primeiros de cada Olimpíada
ungroup() %>%
mutate(Team = reorder_within(Team, total_medalhistas, Olimpiada))
top_5<-table(top_5)
top_5 <- olimpiadas %>%
filter(Sex == "F", !is.na(Medal)) %>%  # Filtrar por mulheres e remover registros sem medalhas
group_by(Olimpiada, Team) %>%  # Agrupar por Olimpíada e país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(Olimpiada, desc(total_medalhistas)) %>%  # Ordenar por Olimpíada e número de medalhistas
group_by(Olimpiada) %>%  # Agrupar novamente por Olimpíada
slice_head(n = 5) %>% # Selecionar os 5 primeiros de cada Olimpíada
ungroup() %>%
mutate(Team = reorder_within(Team, total_medalhistas, Olimpiada))
tabela_top_5<-table(top_5)
tabela_top_5
top_5$Team <- str_replace(top_5$Team, "___.*$", "")
tabela_top_5<-table(top_5)
View(top_5)
tabela_top_5<-table(top_5)
tabela_top_5
View(top_5)
ggplot(top_5, aes(x = Team, y = total_medalhistas)) +
geom_bar(stat = "identity", fill = rep(c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600"),5)) +
facet_wrap(~Olimpiada, scales = "free_x") +  # Dividir o gráfico por Olimpíada
labs(x = "País", y = "Total de Medalhistas", title = "Top 5 Países com Mais Medalhistas (Feminino) por Olimpíada") +
scale_y_reordered() +  # Função para aplicar a ordenação correta nas facetas
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_5, aes(x = fct_reorder(Team, total_medalhistas, .desc = T), y = total_medalhistas, fill = Team, label = Team),)+
geom_bar(stat = "identity", fill = rep(c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600"),5)) +
facet_wrap(~Olimpiada, scales = "free_x") +  # Dividir o gráfico por Olimpíada
labs(x = "País", y = "Total de Medalhistas", title = "Top 5 Países com Mais Medalhistas (Feminino) por Olimpíada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotacionar os nomes dos países para facilitar a leitura
theme_estat()
sydney_2000 <- sydney_2000 %>%
mutate(IMC = Weight / (Height^2))
athina_2004 <- athina_2004 %>%
mutate(IMC = Weight / (Height^2))
beijing_2008 <- beijing_2008 %>%
mutate(IMC = Weight / (Height^2))
london_2012 <- london_2012 %>%
mutate(IMC = Weight / (Height^2))
rio_2016 <- rio_2016 %>%
mutate(IMC = Weight / (Height^2))
olimpiadas <- rbind(sydney_2000,athina_2004,beijing_2008,london_2012,rio_2016)
# Filtrando por esportes
olimpiadas$Sport
# Filtrando por esportes
distinct(olimpiadas$Sport)
# Pacotes ----
pacman::p_load(tidyverse,readxl,lubridate,janitor,ggplot2,dplyr,tidytext)
# Filtrando por esportes
distinct(olimpiadas$Sport)
# Filtrando por esportes
unique(olimpiadas$Sport)
olimpiadas %>%
filter(Sport == c("Badminton","Athletics","Judo", "Gymnastics")
)
IMC<-olimpiadas %>%
filter(Sport == c("Badminton","Athletics","Judo", "Gymnastics")) %>%
group_by(Sport)
View(IMC)
# Calculando o IMC corretamente e filtrando os esportes de interesse
olimpiadas <- olimpiadas %>%
mutate(IMC = Weight / (Height^2)) %>%
filter(Sport %in% c("Badminton", "Athletics", "Judo", "Gymnastics"))
# Estatísticas descritivas por esporte
library(dplyr)
estatisticas <- olimpiadas %>%
group_by(Sport) %>%
summarise(
media = mean(IMC, na.rm = TRUE),
mediana = median(IMC, na.rm = TRUE),
desvio_padrao = sd(IMC, na.rm = TRUE),
min = min(IMC, na.rm = TRUE),
max = max(IMC, na.rm = TRUE)
)
print(estatisticas)
# Visualização com boxplot
library(ggplot2)
ggplot(olimpiadas, aes(x = Sport, y = IMC, fill = Sport)) +
geom_boxplot() +
labs(title = "Comparação do IMC entre Esportes", x = "Esporte", y = "IMC") +
theme_minimal()
# Teste de normalidade (Shapiro-Wilk) por esporte
shapiro_tests <- olimpiadas %>%
group_by(Sport) %>%
summarise(p_valor_shapiro = shapiro.test(IMC)$p.value)
print(shapiro_tests)
# Verificando o tamanho das amostras por esporte
tamanho_amostras <- olimpiadas %>%
group_by(Sport) %>%
summarise(tamanho = n())
print(tamanho_amostras)
# Aplicando o teste de Shapiro-Wilk apenas em grupos com tamanho >= 3
shapiro_tests <- olimpiadas %>%
group_by(Sport) %>%
filter(n() >= 3) %>%  # Filtra grupos com pelo menos 3 observações
summarise(p_valor_shapiro = shapiro.test(IMC)$p.value)
print(shapiro_tests)
# Se normalidade não for satisfeita, realizar Kruskal-Wallis
kruskal_result <- kruskal.test(IMC ~ Sport, data = olimpiadas)
print(kruskal_result)
# Se ANOVA ou Kruskal-Wallis forem significativos, teste post-hoc
if (summary(anova_result)[[1]]["Sport", "Pr(>F)"] < 0.05) {
# Teste post-hoc Tukey
tukey_test <- TukeyHSD(anova_result)
print(tukey_test)
} else if (kruskal_result$p.value < 0.05) {
# Teste post-hoc Dunn (precisa do pacote FSA)
library(FSA)
dunn_test <- dunnTest(IMC ~ Sport, data = olimpiadas, method = "bonferroni")
print(dunn_test)
}
# Se normalidade for satisfeita, realizar ANOVA
anova_result <- aov(IMC ~ Sport, data = olimpiadas)
summary(anova_result)
# Se ANOVA ou Kruskal-Wallis forem significativos, teste post-hoc
if (summary(anova_result)[[1]]["Sport", "Pr(>F)"] < 0.05) {
# Teste post-hoc Tukey
tukey_test <- TukeyHSD(anova_result)
print(tukey_test)
} else if (kruskal_result$p.value < 0.05) {
# Teste post-hoc Dunn (precisa do pacote FSA)
library(FSA)
dunn_test <- dunnTest(IMC ~ Sport, data = olimpiadas, method = "bonferroni")
print(dunn_test)
}
# Supondo que o dataset esteja num arquivo CSV chamado "medal_data.csv"
medal_data <- olimpiadas
# Remover linhas com valores ausentes, se houver
medal_data <- na.omit(medal_data)
# Verificar a estrutura dos dados
str(medal_data)
library(dplyr)
# Contar o número total de medalhas por atleta
medal_count <- medal_data %>%
group_by(Name) %>%
summarise(Total_Medals = n())
# Identificar os 3 atletas com mais medalhas
top_3_medalists <- medal_count %>%
top_n(3, Total_Medals)
print(top_3_medalists)
# Contar o número total de medalhas por atleta
medal_count <- medal_data %>%
group_by(Name) %>%
summarise(Total_Medals = n())
# Identificar os 3 atletas com mais medalhas
top_3_medalists <- medal_count %>%
top_n(3, Total_Medals)
print(top_3_medalists)
# Filtrar os dados para os top 3 atletas
top_3_data <- medal_data %>%
filter(Name %in% top_3_medalists$Name)
# Contar a quantidade de cada tipo de medalha para os Top 3 atletas
medal_type_count <- top_3_data %>%
group_by(Name, Medal) %>%
summarise(Count = n())
print(medal_type_count)
# Passo 4: Visualização dos dados
library(ggplot2)
# Gráfico de barras mostrando a contagem de medalhas por tipo para os Top 3 atletas
ggplot(medal_type_count, aes(x = Name, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribuição de Medalhas (Ouro, Prata, Bronze) para os Top 3 Atletas",
x = "Atleta", y = "Quantidade de Medalhas") +
scale_fill_manual(values = c("gold", "gray", "brown"))
# Gráfico de barras mostrando a contagem de medalhas por tipo para os Top 3 atletas
ggplot(medal_type_count, aes(x = Name, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribuição de Medalhas (Ouro, Prata, Bronze) para os Top 3 Atletas",
x = "Atleta", y = "Quantidade de Medalhas") +
scale_fill_manual(values = c("brown", "gray", "gold"))
# Gráfico de barras mostrando a contagem de medalhas por tipo para os Top 3 atletas
ggplot(medal_type_count, aes(x = Name, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribuição de Medalhas (Ouro, Prata, Bronze) para os Top 3 Atletas",
x = "Atleta", y = "Quantidade de Medalhas") +
scale_fill_manual(values = c("brown", "gold", "gray"))
# Criar uma tabela de contingência entre Atleta e Tipo de Medalha
medal_table <- table(top_3_data$Name, top_3_data$Medal)
# Teste qui-quadrado
chisq_test <- chisq.test(medal_table)
print(chisq_test)
summary(olimpiadas$Height)
summary(olimpiadas$Weight)
library(ggplot2)
ggplot(olimpiadas, aes(x = Height, y = Weight)) +
geom_point() +
labs(title = "Relação entre Altura e Peso dos Atletas",
x = "Altura (cm)",
y = "Peso (kg)") +
theme_minimal()
cor(olimpiadas$Height, olimpiadas$Weight, use = "complete.obs", method = "pearson")
model <- lm(Weight ~ Height, data = olimpiadas)
summary(model)
model_multi <- lm(Weight ~ Height + Sex + Sport, data = olimpiadas)
summary(model_multi)
plot(model$residuals)
anova(model)
# Introduçao ----
# Primeiro paragrafo: descrever o objetivo do projeto. O que se quer descubrir com essas analises
# Objetivo do Projeto
# O presente projeto tem como objetivo auxiliar João Neves, proprietário da academia de alta performance House of Excellence, na otimização do desempenho de seus atletas de elite, com base em análises estatísticas de suas participações nas edições dos Jogos Olímpicos de 2000 a 2016. O foco das análises é identificar padrões de desempenho, características físicas e fatores relacionados às conquistas de medalhas, oferecendo insights valiosos para melhorar a preparação e a performance futura dos atletas.
# Segundo paragrafo: detalhar quais são as analises que seram feitas. TODS OS TIPOS DE ANALISE, se é analise descritiva , teste de hipoteses, regressão. Descrever um pouco sobre o banco de dados( quantidade de variaveis, tipos de variaveis, etc).
# Metodologia e Análises
#As análises contemplam diferentes abordagens, incluindo:
#  Análises descritivas: Tabelas e gráficos para uma visualização clara das variáveis de interesse, como Índice de Massa Corporal (IMC), peso e altura de atletas de diferentes modalidades (ginástica, judô, atletismo e badminton).
#Testes de hipótese: Avaliação da significância estatística na relação entre variáveis como peso, altura e tipo de medalha, verificando se diferenças observadas entre grupos de atletas são significativas.
#Modelos de regressão: Estimativa de relações entre variáveis como altura, peso e desempenho nos esportes, buscando entender como essas características influenciam o resultado em competições de elite.
#O banco de dados contém informações detalhadas sobre cada atleta, incluindo Nome, Sexo, Idade, Altura, Peso, País, Esporte, Evento, Tipo de Medalha e a edição da Olimpíada. São ao todo X variáveis e Y observações, que cobrem um amplo espectro de esportes e medalhistas.
# Terceiro paragrafo fala-se do software utilizado
# Ferramentas Utilizadas
# As análises foram realizadas utilizando o software R, versão 4.4.0, com pacotes especializados para manipulação de dados, visualização gráfica e modelagem estatística.
# Metodologia ----
# explicar tudo que for utilizado
# Pacotes ----
pacman::p_load(tidyverse,readxl,lubridate,janitor,ggplot2,dplyr,tidytext)
# Diretorio de trabalho
setwd("C:/Users/Francisco Italo/Documents")
# Leitura dos dados
sydney_2000<-read_xlsx("Olimpiadas_2000_2016.xlsx", sheet = 4) # 2000
athina_2004<-read_xlsx("Olimpiadas_2000_2016.xlsx", sheet = 1) # 2004
beijing_2008<-read_xlsx("Olimpiadas_2000_2016.xlsx", sheet = 5) # 2008
london_2012<-read_xlsx("Olimpiadas_2000_2016.xlsx", sheet = 2)# 2012
rio_2016<-read_xlsx("Olimpiadas_2000_2016.xlsx", sheet = 3) # 2016
# Renomeando as variaveis
sydney_2000 <- sydney_2000 %>%
rename(c(Name = N4m3, Sex = S3x, Age = "4g3", Height = "H31ght", Weight = "W31ght", Team = T34m, Sport = Sp0rt, Event = "3v3nt", Medal = M3d4l))
athina_2004 <- athina_2004 %>%
rename(c(Name = Names, Sex = Gender, Age = Age, Height = "Height (cm)", Weight = "Weight (lbs)", Team = Team, Sport = Sport, Event = Event, Medal = Medal))
beijing_2008 <- beijing_2008 %>%
rename(c(Name = Names, Sex = Sex, Age = Age, Height = Height, Weight = Weight, Team = Team, Sport = Sport, Event = Event, Medal = Medal))
london_2012 <- london_2012 %>%
rename(c(Name = Name, Sex = Sex, Age = Age, Height = Height, Weight = Weight, Team = Team, Sport = Sport, Event = Event, Medal = Medal))
rio_2016 <- rio_2016 %>%
rename(c(Name = Name, Sex = Sex, Age = Age_year, Height = Height_cm, Weight = Weight_lbs, Team = Country, Sport = Sport, Event = Event, Medal = Medal))
# Transformando os dados ----
# Convertando lbs para kg
sydney_2000$Weight <- sydney_2000$Weight * 0.453592
athina_2004$Weight <- athina_2004$Weight * 0.453592
beijing_2008$Weight <- beijing_2008$Weight * 0.453592
london_2012$Weight <- london_2012$Weight * 0.453592
rio_2016$Weight <- rio_2016$Weight * 0.453592
# Altura cm para m
sydney_2000$Height <- sydney_2000$Height / 100
athina_2004$Height <- athina_2004$Height / 100
beijing_2008$Height <- beijing_2008$Height / 100
london_2012$Height <- london_2012$Height / 100
rio_2016$Height <- rio_2016$Height / 100
# Sexo
sydney_2000 %>% distinct(Sex)# elementos da coluna sem duplicatas
sydney_2000$Sex <- as.factor(sydney_2000$Sex)
athina_2004 %>% distinct(Sex)# elementos da coluna sem duplicatas
athina_2004$Sex <- as.factor(athina_2004$Sex)
beijing_2008 %>% distinct(Sex)# elementos da coluna sem duplicatas
beijing_2008$Sex <- as.factor(beijing_2008$Sex)
london_2012 %>% distinct(Sex)# elementos da coluna sem duplicatas
london_2012$Sex <- as.factor(london_2012$Sex)
rio_2016 %>% distinct(Sex)# elementos da coluna sem duplicatas
rio_2016$Sex <- as.factor(rio_2016$Sex)
# Sedes das olimpiadas
sydney_2000 <- sydney_2000 %>% mutate(Olimpiada = "Sydney")
athina_2004 <- athina_2004 %>% mutate(Olimpiada = "Athina")
beijing_2008 <- beijing_2008 %>% mutate(Olimpiada = "Beijing")
london_2012 <- london_2012 %>% mutate(Olimpiada = "London")
rio_2016 <- rio_2016 %>% mutate(Olimpiada = "Rio")
# Juntando os dados
olimpiadas <- rbind(sydney_2000,athina_2004,beijing_2008,london_2012,rio_2016)
# Tema da Estat
cores_estat <- c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600", "#CC9966", "#999966", "#006606", "#008091", "#041835", "#666666")
theme_estat <- function(...) {
theme <- ggplot2::theme_bw() +
ggplot2::theme(
axis.title.y = ggplot2::element_text(colour = "black", size = 12),
axis.title.x = ggplot2::element_text(colour = "black", size = 12),
axis.text = ggplot2::element_text(colour = "black", size = 9.5),
panel.border = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black"),
legend.position = "top",
...
)
return(
list(
theme,
scale_fill_manual(values = cores_estat),
scale_colour_manual(values = cores_estat)
)
)
}
# 1. Top 5 países com maior número de mulheres medalhistas (13/10)----
# O cliente gostaria de entender quais países possuem um maior número de mulheres que conquistaram medalhas, em ordem do país com maior número de mulheres medalhistas para o país com menor número.
# Total (Tabela pronta, mas falta colocar a padronização da Estat)
top_5_total<-olimpiadas %>%
filter(Sex == "F", !is.na(Medal)) %>%  # Filtrar por mulheres e remover registros sem medalhas
group_by(Team) %>%  # Agrupar por país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(desc(total_medalhistas)) %>%  # Ordenar por número de medalhistas de forma decrescente
slice_head(n = 5)
ggplot(top_5_total, aes(x = reorder(Team, -total_medalhistas), y = total_medalhistas)) +
geom_bar(stat = "identity", fill = c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600")) +
labs(x = "País", y = "Número de Mulheres Medalhistas",
title = "Top 5 Países com Maior Número de Mulheres Medalhistas") +
theme_estat()
# Por olimpiada ( Tabela está pronta, mas os gráficos nãoe stão em ordem)
top_5 <- olimpiadas %>%
filter(Sex == "F", !is.na(Medal)) %>%  # Filtrar por mulheres e remover registros sem medalhas
group_by(Olimpiada, Team) %>%  # Agrupar por Olimpíada e país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(Olimpiada, desc(total_medalhistas)) %>%  # Ordenar por Olimpíada e número de medalhistas
group_by(Olimpiada) %>%  # Agrupar novamente por Olimpíada
slice_head(n = 5) %>% # Selecionar os 5 primeiros de cada Olimpíada
ungroup() %>%
mutate(Team = reorder_within(Team, total_medalhistas, Olimpiada))
top_5$Team <- str_replace(top_5$Team, "___.*$", "")
tabela_top_5<-table(top_5)
ggplot(top_5, aes(x = fct_reorder(Team, total_medalhistas, .desc = T), y = total_medalhistas, fill = Team, label = Team),)+
geom_bar(stat = "identity", fill = rep(c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600"),5)) +
facet_wrap(~Olimpiada, scales = "free_x") +  # Dividir o gráfico por Olimpíada
labs(x = "País", y = "Total de Medalhistas", title = "Top 5 Países com Mais Medalhistas (Feminino) por Olimpíada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotacionar os nomes dos países para facilitar a leitura
theme_estat()
# 2 Valor IMC por esporte, estes sendo, ginástica, futebol, judô, atletismo e badminton (20/10) ----
# O cliente deseja comparar os valores do Índice de Massa Corporal (IMC) entre atletas de
# diferentes esportes, especificamente ginástica, judô, atletismo e badminton, para entender a
# variação entre eles e identificar se algum esporte tende a ter IMCs geralmente menores,
# maiores ou se não há diferença significativa. Para isso, é necessário calcular o IMC de cada
# atleta utilizando a fórmula peso (kg) / altura (m)2 e, em seguida, analisar os resultados para cada
# esporte selecionado, observando como os valores se comportam em relação aos esportes
# mencionados.
sydney_2000 <- sydney_2000 %>%
mutate(IMC = Weight / (Height^2))
athina_2004 <- athina_2004 %>%
mutate(IMC = Weight / (Height^2))
beijing_2008 <- beijing_2008 %>%
mutate(IMC = Weight / (Height^2))
london_2012 <- london_2012 %>%
mutate(IMC = Weight / (Height^2))
rio_2016 <- rio_2016 %>%
mutate(IMC = Weight / (Height^2))
# Juntando os dados
olimpiadas <- rbind(sydney_2000,athina_2004,beijing_2008,london_2012,rio_2016)
# Filtrando por esportes(ginástica, judô, atletismo e badminton)
unique(olimpiadas$Sport) # Para
IMC<-olimpiadas %>%
filter(Sport == c("Badminton","Athletics","Judo", "Gymnastics")) %>%
group_by(Sport) %>%  # Agrupar por país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(desc(total_medalhistas)) %>%  # Ordenar por número de medalhistas de forma decrescente
slice_head(n = 5)
IMC<-olimpiadas %>%
filter(Sport == c("Badminton","Athletics","Judo", "Gymnastics")) %>%
group_by(Sport) %>%  # Agrupar por país
summarise(total_medalhistas = n(), .groups = 'drop') %>%  # Contar o número de medalhistas por país
arrange(desc(total_medalhistas)) %>%  # Ordenar por número de medalhistas de forma decrescente
slice_head(n = 5)
ggplot(top_5, aes(x = fct_reorder(Team, total_medalhistas, .desc = T), y = total_medalhistas, fill = Team, label = Team),)+
geom_bar(stat = "identity", fill = rep(c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600"),5)) +
facet_wrap(~Olimpiada, scales = "free_x") +  # Dividir o gráfico por Olimpíada
labs(x = "País", y = "Total de Medalhistas", title = "Top 5 Países com Mais Medalhistas (Feminino) por Olimpíada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotacionar os nomes dos países para facilitar a leitura
theme_estat()
ggplot(top_5, aes(x = fct_reorder(Team, -total_medalhistas), y = total_medalhistas, fill = Team, label = Team),)+
geom_bar(stat = "identity", fill = rep(c("#A11D21", "#003366", "#CC9900", "#663333", "#FF6600"),5)) +
facet_wrap(~Olimpiada, scales = "free_x") +  # Dividir o gráfico por Olimpíada
labs(x = "País", y = "Total de Medalhistas", title = "Top 5 Países com Mais Medalhistas (Feminino) por Olimpíada") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotacionar os nomes dos países para facilitar a leitura
theme_estat()
# Rodar apenas uma vez na vida!
## Instalando o tinytex(pacote apenas)
### CRAN version
install.packages('tinytex')
install.packages("tinytex")
### or the development version on GitHub
remotes::install_github('rstudio/tinytex')
## Baixando o tinytex
library(tinytex)
tinytex::install_tinytex()
load("~/.RData")
install.packages("installr")
library(installr)
updateR()  # Para Windows
library(installr)
updateR()  # Para Windows
### or the development version on GitHub
remotes::install_github('rstudio/tinytex')
## Baixando o tinytex
library(tinytex)
tinytex::install_tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
remove.packages("tinytex")
# Rodar apenas uma vez na vida!
## Instalando o tinytex(pacote apenas)
### CRAN version
install.packages('tinytex')
## Baixando o tinytex
library(tinytex)
tinytex::install_tinytex()
remove.packages("tinytex")
# Rodar apenas uma vez na vida!
## Instalando o tinytex(pacote apenas)
### CRAN version
install.packages('tinytex')
### or the development version on GitHub
remotes::install_github('rstudio/tinytex')
## Baixando o tinytex
library(tinytex)
tinytex::install_tinytex()
# Rodar apenas uma vez na vida!
## Instalando o tinytex(pacote apenas)
### CRAN version
install.packages('tinytex')
## Baixando o tinytex
library(tinytex)
install.packages("tinytex")
#| include: false
source("rdocs/source/packages.R")
# Rodar apenas uma vez na vida!
## Instalando o tinytex(pacote apenas)
### CRAN version
install.packages('tinytex')
### or the development version on GitHub
remotes::install_github('rstudio/tinytex')
install.packages("tinytex")
## Baixando o tinytex
library(tinytex)
tinytex::check_installed('framed')
uninstall_tinytex(force = FALSE, dir = tinytex_root())
reinstall_tinytex(packages = TRUE, dir = tinytex_root(), ...)
reinstall_tinytex(packages = TRUE, dir = tinytex_root())
reinstall_tinytex(packages = TRUE)
# Desinstalar o TinyTeX (caso esteja instalado)
tinytex::uninstall_tinytex()
# Instalar o TinyTeX novamente
tinytex::install_tinytex()
